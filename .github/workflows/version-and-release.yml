name: Release

on:
  release:
    types: [published]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          realversion="${GITHUB_REF/refs\/tags\//}"
          realversion="${realversion//v/}"
          echo "VERSION=$realversion" >> "$GITHUB_OUTPUT"

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
          cache: maven

      - name: Update Maven version
        run: mvn versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}

      # Build and deploy artifacts to local staging directory with publication profile
      # The flatten-maven-plugin configured in this profile removes repositories sections
      - name: Stage artifacts
        run: |
          mvn -Ppublication clean deploy -DskipTests -DaltDeploymentRepository=local::file:./target/staging-deploy
          
          # Verify artifacts were staged correctly
          echo "Staged artifacts:"
          find target/staging-deploy -type f | grep -v "maven-metadata" | sort
          
          # Show only artifacts we want to keep
          echo "Redis OM Spring artifacts to release:"
          find target/staging-deploy -path "*/redis-om-spring-parent/*" -o -path "*/redis-om-spring/*" -o -path "*/redis-om-spring-ai/*" | grep -v "maven-metadata" | sort
          
          # Verify no repositories sections
          echo "Checking for repositories sections in POMs:"
          ! grep -r "<repositories>" target/staging-deploy --include="*.pom" || echo "Warning: Found repositories sections in POMs"

      # Run JReleaser through Maven plugin to handle the release
      - name: Release with JReleaser Maven Plugin
        run: mvn -B -Prelease org.jreleaser:jreleaser-maven-plugin:full-release -Djreleaser.config.file="${GITHUB_WORKSPACE}/jreleaser.yml"
        env:
          # JReleaser configuration
          JRELEASER_PROJECT_VERSION: ${{ steps.get_version.outputs.VERSION }}
          JRELEASER_BRANCH: main
          
          # GitHub Token (primary authentication for JReleaser)
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GITHUB_USERNAME: ${{ secrets.GIT_USER }}
          
          # Backward compatibility with other JReleaser variables
          GIT_COMMITTER_NAME: ${{ secrets.GIT_USER }}
          GIT_COMMITTER_EMAIL: "noreply@redis.com"
          
          # GPG signing configuration
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_SIGNING_ENABLED: true
          JRELEASER_SIGNING_ACTIVE: ALWAYS
          
          # Maven Central publishing configuration
          JRELEASER_NEXUS2_MAVEN_CENTRAL_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          
          # Also provide standard Maven variables for extra compatibility
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

          # Debug mode
          JRELEASER_DEBUG: true

      # Capture JReleaser output for debugging
      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-output
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties