name: Integration

on:
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  code-format-check:
    name: Code Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Cache Maven Repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: om-format-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            om-format-

      - name: Check code formatting
        run: mvn spotless:check -Dspotless.check.skip=false
        
  build:
    needs: code-format-check
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3

      - name: Cache Maven Repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: om-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            om-

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: 21
          distribution: 'zulu'

      - run: mvn dependency:go-offline

      # Build without running tests first, then run tests only in tests module
      - name: Build and Test
        run: |
          # Build without running tests first
          mvn clean install -DskipTests
          
          # Only run tests in the tests module with coverage enabled
          cd tests
          mvn test -Pcoverage

      - name: Save Maven Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: om-${{ hashFiles('**/pom.xml') }}

      # Generate and upload code coverage report
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: false # Don't fail if codecov upload fails
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true # For debugging